---  Grammar for JSON

load ../../peg-parser-count .
    
fmod G-INPUT is
    pr PEG-SYNTAX .
    --- Input grammar
    op G : -> Grammar .
    eq G =
	'json           <- 'value . 'EOF, 
    'obj            <- strTok("{") . 'pair . (strTok(",") . 'pair) * . strTok("}") / strTok("{") . strTok("}"), 
    'pair           <- 'STRING . strTok(":") . 'value,
    'arr            <- strTok("[") . 'value . (strTok(",") . 'value)* . strTok("]") / strTok("[") . strTok("]") ,
    'value          <- 'obj / 'arr / 'STRING / 'NUMBER / strTok("true") / strTok("false") / strTok("null"),
    'STRING         <-  strTok("\"") . (! "\"" . [.])* . strTok("\"")  /  strTok("'") . (! "'" . [.])* . strTok("'"),
    'NUMBER         <- "-" ? . [0-9]+ . ("." . ! "." . [0-9]+)? . 'SKIP, 
    'EOF            <- 'SKIP . ! [.], 
	'SKIP           <- ("\n" / " " / "\t" ) * 
    .

	  --- Initial expression
    op IE : -> Exp .
    eq IE = 'json .
endfm

view Test from GRAMMAR-INPUT to G-INPUT is endv   

mod TEST is
    pr PEG-RULES-IO{Test} .
endm

eof

--- Example of use
erew read-file("./yes/4.json") .

