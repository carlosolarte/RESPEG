---  Grammar for Pallene with cuts

load ../../peg-parser-count .

fmod G-INPUT is
    pr PEG-SYNTAX .
    --- Input grammar
    op G : -> Grammar .
    eq G =
  'program         <-  'SKIP . ('toplevelfunc  /  'toplevelvar  /  'toplevelrecord  /  'import / 'foreign) * . 'SKIP . ! [.],
  'toplevelfunc    <-  'localopt . strTok("function") . try( 'NAME ) . try(strTok("(")) . 'paramlist . try(strTok(")")) . 'rettypeopt . 'block . try(strTok("end") ) ,
  'toplevelvar     <-  'localopt . 'decl . try(strTok("=")) . 'exp,
  'toplevelrecord  <-  strTok("record") . try('NAME . 'recordfields . strTok("end") ) ,
  'localopt        <-  strTok("local") ?,
  'import          <-  strTok("local") . 'NAME . strTok("=") . strTok("import") . try((strTok("(") . 'STRINGLIT . strTok(")") / 'STRINGLIT)),
  'foreign         <-  strTok("local") . 'NAME . strTok("=") . strTok("foreign") . try( strTok("import") . (strTok("(") . 'STRINGLIT . strTok(")") / 'STRINGLIT)),
  'rettypeopt      <-  (strTok(":") . try('rettype)) ?,
  'paramlist       <-  ('param . (strTok(",") . 'param) *) ?,
  'param           <-  'NAME . strTok(":") . try('type),
  'decl            <-  'NAME . (strTok(":") . try('type)) ?,
  'decllist        <-  'decl . (strTok(",") .  try('decl)) *,
  'simpletype      <-  strTok("nil") / strTok("boolean") / strTok("integer") / strTok("float") / strTok("string") / strTok("value") / 'NAME / strTok("{") . 'type . strTok("}"),
  'typelist        <-  strTok("(") .  ('type . (strTok(",") . try('type)) *) ? . try(strTok(")")),
  'rettype         <-  'typelist .  strTok("->") .  'rettype  /  'simpletype . strTok("->") . 'rettype  /  'typelist  /  'simpletype,
  'type            <-  'typelist . strTok("->") . 'rettype  /  'simpletype . strTok("->") . 'rettype  /  'simpletype,
  'recordfields    <-  'recordfield +,
  'recordfield     <-  'NAME . strTok(":") . try('type . (strTok(";") ?)),
  'block           <-  'statement * . 'returnstat ?,
  'statement       <-  strTok(";")  /  strTok("do") . 'block . try(strTok("end"))  /  strTok("while") . try('exp) . try(strTok("do")) . 'block . try(strTok("end"))  /  strTok("repeat") . 'block . strTok("until") . 'exp  /  strTok("if") . 'exp . strTok("then") . 'block . 'elseifstats . 'elseopt . strTok("end")  /  strTok("for") . 'decl . strTok("=") . 'exp . strTok(",") . 'exp . (strTok(",") . 'exp)? . strTok("do") . 'block . strTok("end")  /  strTok("local") . 'decllist . strTok("=") . 'explist  /  'varlist . strTok("=") . 'explist  /  'suffixedexp ,
  'elseifstats     <-  'elseifstat *,
  'elseifstat      <-  strTok("elseif") . 'exp . strTok("then") . 'block,
  'elseopt         <-  (strTok("else") . 'block)?,
  'returnstat      <-  strTok("return") .  'explist ? .  strTok(";") ?,
  'exp             <-  'e1,
  'e1              <-  'e2 . (strTok("or") .  try('e2)) * ,
  'e2              <-  'e3 . (strTok("and") . try('e3)) *,
  'e3              <-  'e4 . ((strTok("==") / strTok("~=") / strTok("<=") / strTok(">=") / strTok("<") / strTok(">")) . try('e4)) *,
  'e4              <-  'e5 . (strTok("|") . try('e5))*,
  'e5              <-  'e6 . (strTok("~") . ! strTok("=")  . try('e6))*,
  'e6              <-  'e7 . (strTok("&") .  try('e7))*,
  'e7              <-  'e8 . ((strTok("<<") / strTok(">>")) . try('e8))*,
  'e8              <-  'e9 . (strTok("..") . 'e8)?,
  'e9              <-  'e10 . ((strTok("+") / strTok("-")) . 'e10)*,
  'e10             <-  'e11 . ((strTok("*") / strTok("%%") / strTok("/") / strTok("//")) . 'e11)*,
  'e11             <-  (strTok("not") / strTok("#") / strTok("-") / strTok("~"))* . 'e12,
  'e12             <-  'castexp . (strTok("^") . try('e11)) ?,
  'suffixedexp     <-  'prefixexp . 'expsuffix + ,
  'expsuffix       <-  'funcargs  /  strTok(":")  . try( 'NAME . 'funcargs )  /  strTok("[") . try('exp . strTok("]") )  /  strTok(".") . ! "." . try('NAME ),
  'prefixexp       <-  'NAME  /  strTok("(") . 'exp . strTok(")"),
  'castexp         <-  'simpleexp . strTok("as") . 'type  /  'simpleexp,
  'simpleexp       <-  strTok("nil") / strTok("false") / strTok("true") / 'NUMBER / 'STRINGLIT / 'initlist / 'suffixedexp / 'prefixexp,
  'var             <-  'suffixedexp  /  'NAME . ! 'expsuffix,
  'varlist         <-  'var . (strTok(",") . try('var))*,
  'funcargs        <-  strTok("(") . 'explist ? . strTok(")")  /  'initlist  /  'STRINGLIT ,
  'explist         <-  'exp . (strTok(",") . try('exp))*,
  'initlist        <-  strTok("{") . 'fieldlist ? .  try(strTok("}")),
  'fieldlist       <-  'field . ('fieldsep . 'field)* . 'fieldsep ?,
  'field           <-  ('NAME . strTok("="))? . 'exp,
  'fieldsep        <-  strTok(";") / strTok(",") ,
  'STRINGLIT       <-  strTok("\"") . (! "\"" . [.])* . strTok("\"")  /  strTok("'") .  (! "'" . [.])* . strTok("'"),
  'RESERVED        <-  ("a" . "n" . try("d")  / "a" . try("s") / "b" . "o" . try(strTok'("olean")) / "b" . "r" . try(strTok'("eak")) / "d" . try("o") / strTok'("elsei") . try("f") / strTok'("el") . try(strTok'("se")) / strTok'("e") . try(strTok'("nd")) / strTok'("fl") . try(strTok'("oat")) / strTok'("foreign") / strTok'("for") / strTok'("false")
                     / strTok'("function") / strTok'("goto") / strTok'("if") / strTok'("import") / strTok'("integer") / strTok'("in") / strTok'("local") / strTok'("nil") / strTok'("not") / strTok'("or")
                     / strTok'("record") / strTok'("repeat") / strTok'("return") / strTok'("string") / strTok'("then") / strTok'("true") / strTok'("until") / strTok'("value") / strTok'("while")) . ![0-Z],
  'NAME            <-  ! 'RESERVED . [0-Z] . [0-Z] * . 'SKIP, --- MODIFIED
  'NUMBER          <- [0-9]+ . ("." . ! "." . [0-9]*)? . 'SKIP,
  'COMMENT         <- strTok("--") . ( ! "\n" . [.])* . 'SKIP,
  'SKIP <- ("\n" / " " / "\t" / 'COMMENT) *
  .

	  --- Initial expression
    op IE : -> Exp .
    eq IE = 'program . 'SKIP .
endfm

view Test from GRAMMAR-INPUT to G-INPUT is endv

mod TEST is
    pr PEG-RULES-IO{Test} .
endm

eof

--- Example of use
erew read-file("./yes//expression01.pallene") .
