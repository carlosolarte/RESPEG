---  Grammar for C89 with cuts

load ../../peg-parser-count .
    
fmod G-INPUT is
    pr PEG-SYNTAX .
    --- Input grammar
    op G : -> Grammar .
        eq G =
	'SKIP <- ("\n" / " " / "\t" / 'COMMENT) * ,
	'translation-unit  <-  'SKIP . 'external-decl + . 'SKIP . ! [.],
        'external-decl     <-  'function-def  /  'decl,
	'function-def      <-  ('declarator . 'decl * . 'compound-stat)  /  'decl-spec . 'function-def ,
	'decl-spec         <-  'storage-class-spec  /  'type-spec  /  'type-qualifier,
	'decl              <-  'decl-spec . 'init-declarator-list ? . strTok(";")  /  'decl-spec . 'decl,
	'storage-class-spec    <-  strTok("auto")  /  strTok("register")  /  strTok("static")  /  strTok("extern")  /  strTok("typedef") ,

	'type-spec             <-  strTok("void")  /  strTok("char")  /  strTok("short")  /  strTok("int")  /
	strTok("long")  / strTok("float")  / strTok("double")  /  strTok("signed")  /  strTok("unsigned")  /
	'typedef-name  / strTok("enum") . 'ID ? . strTok("{") .  'enumerator .  (strTok(",") . try('enumerator) ) * . try(strTok("}")) /
	strTok("enum") . 'ID  / 'struct-or-union . 'ID ? . strTok("{") . try('struct-decl +) . try(strTok("}")) /
	'struct-or-union . 'ID ,
	'type-qualifier        <-  strTok("const")  /  strTok("volatile") ,
	'struct-or-union       <-  strTok("struct")  /  strTok("union"),
	'init-declarator-list  <-  'init-declarator . (strTok(",") . 'init-declarator ) *,
	'init-declarator       <-  ('declarator . strTok("=") .  'initializer)  / 'declarator,
	'struct-decl           <-  ('spec-qualifier . 'struct-declarator . (strTok(",") . 'struct-declarator ) * . strTok(";"))  / 'spec-qualifier . 'struct-decl ,
	'spec-qualifier-list   <-  ('type-spec  /  'type-qualifier) +,
	'spec-qualifier        <-  'type-spec  /  'type-qualifier,
	'struct-declarator     <-  'declarator ? . strTok(":") . 'const-exp  /  'declarator,
	'enumerator            <-  'ID . strTok("=") . try('const-exp)  /  'ID,
	'declarator            <-  'pointer ? . 'direct-declarator,
	'direct-declarator     <-  ('ID  /  strTok("(") . 'declarator . strTok(")")) . (strTok("[") . 'const-exp ? . strTok("]")  / strTok("(") . 'param-type-list . strTok(")")  / strTok("(") . 'id-list ? . strTok(")") ) *,
	'pointer               <-  strTok("*") . 'type-qualifier * . 'pointer  /  strTok("*") . 'type-qualifier *,
	'param-type-list       <-  'param-decl . (strTok(",") . 'param-decl ) * . (strTok(",") . strTok("...") ) ? ,
	'param-decl            <-  'decl-spec + .  ('declarator  /  'abstract-declarator) ?,
	'id-list               <-  'ID . (strTok(",") . 'ID ) * ,
	'initializer           <-  strTok("{") . 'initializer . (strTok(",") . 'initializer ) * . strTok(",") ? . try(strTok("}"))  / 'assignment-exp,
	'type-name             <-  'spec-qualifier-list . 'abstract-declarator ?,
	'abstract-declarator   <-  'pointer  /  'pointer ? . 'direct-abstract-declarator,
	'direct-abstract-declarator <- strTok("(") . 'abstract-declarator . try(strTok(")")) . (strTok("[") . 'const-exp ? . try(strTok("]"))  / strTok("(") . 'param-type-list ? . try(strTok(")"))) *,
	'typedef-name          <-  'ID,
	'stat                  <-  'ID . strTok(":") . 'stat / 
    strTok("case") . try('const-exp) . try(strTok(":")) . try('stat)   /
	strTok("default") . try(strTok(":")) .  try('stat)  / 'exp ? .  strTok(";")  / 'compound-stat /
	strTok("if") . try(strTok("(")) . try('exp) . try(strTok(")")) . try('stat) . strTok("else") . try('stat) /
	strTok("if") .  try(strTok("(")) .  try('exp) . try(strTok(")")) . try('stat) /
	    strTok("switch") . try(strTok("(")) . try('exp) . try(strTok(")")) . try('stat) /
	    strTok("while") . try(strTok("(")) . try('exp) . try(strTok(")")) . try('stat) /
	    strTok("do") .  try('stat) .  try(strTok("while")) . try(strTok("(")) .  try('exp)  . try(strTok(")")) . try(strTok(";")) /
	    strTok("for") . try(strTok("(")) . 'exp ? . try(strTok(";")) . 'exp ? . try(strTok(";")) . 'exp ? . try(strTok(")")) . 'stat  /
	    strTok("goto") . try('ID)  . try(strTok(";")) /
	    strTok("continue") . try(strTok(";")) /
	    strTok("break") . try(strTok(";")) /
	    strTok("return") . 'exp ? . try(strTok(";")) ,
	    'compound-stat         <-  strTok("{") .  'decl * .  'stat * .  try(strTok("}")),
	    'exp                   <-  'assignment-exp . (strTok(",") . try('assignment-exp)) *,
	    'assignment-exp        <-  'unary-exp . 'assignment-operator . 'assignment-exp  / 'conditional-exp,
	    'assignment-operator   <-  strTok("=") . ! "="  /  strTok("*=")  /  strTok("/=")  / strTok("%=") /  strTok("+=")  /  strTok("-=")  /
	    strTok("<<=")  /  strTok(">>=")  /  strTok("&=")  /  strTok("^=")  /  strTok("|="),
	    'conditional-exp       <-  'logical-or-exp . strTok("?") . try('exp) .  try(strTok(":")) . try('conditional-exp)  / 'logical-or-exp,
	    'const-exp             <-  'conditional-exp,
	    'logical-or-exp        <-  'logical-and-exp . (strTok("||") . try('logical-and-exp) )*,
	    'logical-and-exp       <-  'inclusive-or-exp . (strTok("&&") . try('inclusive-or-exp) ) *,
	    'inclusive-or-exp      <-  'exclusive-or-exp . (strTok("|") . ! strTok("|") . try('exclusive-or-exp) ) *,
	    'exclusive-or-exp      <-  'and-exp . (strTok("^") .  try('and-exp) ) *,
	    'and-exp               <-  'equality-exp .  (strTok("&") . ! strTok("&") . try('equality-exp) ) *,
	    'equality-exp          <-  'relational-exp . ((strTok("==") / strTok("!=")) .  try('relational-exp) ) *,
	    'relational-exp        <-  'shift-exp . ((strTok("<=") / strTok(">=") / strTok("<") / strTok(">")) . 'shift-exp ) *,
	    'shift-exp             <-  'additive-exp . ((strTok("<<") / strTok(">>")) . try('additive-exp) ) * ,
	    'additive-exp          <-  'multiplicative-exp .  ((strTok("+") / strTok("-")) . try('multiplicative-exp) ) *,
	    'multiplicative-exp    <-  'cast-exp .  ((strTok("*") / strTok("/") / strTok("%")) . try('cast-exp) )*,
	    'cast-exp              <-  strTok("(")  . 'type-name . try(strTok(")")) . 'cast-exp  /  'unary-exp,
	    'unary-exp             <-  strTok("++") . try('unary-exp)  /  strTok("--") . try('unary-exp)  / 'unary-operator . try('cast-exp)  /
	    strTok("sizeof") . ( ( strTok("(") . 'type-name . strTok(")") ) / 'unary-exp)   / 'postfix-exp ,
	    'postfix-exp           <-  'primary-exp . (strTok("[") . try('exp) . try(strTok("]"))  /
	      strTok("(") . ('assignment-exp . (strTok(",") . try('assignment-exp) ) * ) ? . try(strTok(")"))  /
	      strTok(".") . try('ID)   /  strTok("->") . try('ID)  /  strTok("++")  /  strTok("--")) *,
	    'primary-exp           <-  'ID  /  'STRING  /  'constant  /  strTok("(") . 'exp . try(strTok(")")),
	    'constant              <-  'INT-CONST  /  'CHAR-CONST  /  'FLOAT-CONST  /  'ENUMERATION-CONST,
	    'unary-operator        <-  strTok("&")  /  strTok("*")  /  strTok("+")  /  strTok("-")  /  strTok("~")  /  strTok("!"),
	    'COMMENT               <-  strTok("/*") .  (! strTok("*/") . [.] ) * . try(strTok("*/")) ,
	    'INT-CONST             <-  ( "0" .  'XDIGIT +  /  ! "0" . 'DIGIT . 'DIGIT *  /  "0" . [0-9] *) . 'SKIP, 
	    'FLOAT-CONST           <-  strTok("0x") . (
	      (("." / 'XDIGIT + )  /  ('XDIGIT + / ".")) . ( 'XDIGIT +) ? ), 
	    'XDIGIT                <- [0-9], 
	    'DIGIT                 <- [0-9],
	    'CHAR-CONST            <-  "'" . ([a-z]  /  ! "'" . [.]) .  "'", 
	    'STRING                <-  strTok("\"") . (! "\"" . [.]  )* . strTok("\""), 
	    'ENUMERATION-CONST     <-  'ID,
	    'ID                    <-  (! 'KEYWORDS) . [a-zA-Z]  . [0-Z-]  * . 'SKIP,  
	    'KEYWORDS              <-  (strTok'("auto")  /  strTok'("double")  /  strTok'("int")  /  strTok'("struct")  /
	      strTok'("break")  /  strTok'("else")  /  strTok'("long")  /  strTok'("switch")  /
	      strTok'("case")  /  strTok'("enum")  /  strTok'("register")  /  strTok'("typedef")  /
	      strTok'("char")  /  strTok'("extern")  /  strTok'("return")  /  strTok'("union") /
	      strTok'("const")  /  strTok'("float")  /  strTok'("short")  /  strTok'("unsigned")  /
	      strTok'("continue")  /  strTok'("for")  /  strTok'("signed")  /  strTok'("void")  /
	      strTok'("default")  /  strTok'("goto")  /  strTok'("sizeof")  /  strTok'("volatile")  /
	      strTok'("do")  /  strTok'("if")  /  strTok'("static")  /  strTok'("while") ) . ! [0-Z] . 

	  --- Initial expression
    op IE : -> Exp .
    eq IE = 'translation-unit . 'SKIP .
endfm

view Test from GRAMMAR-INPUT to G-INPUT is endv   

mod TEST is
    pr PEG-RULES-IO{Test} .
endm
eof

--- Example of use
erew read-file("./bench1/yes/trace.c") .
